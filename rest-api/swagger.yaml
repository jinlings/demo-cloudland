swagger: '2.0'
info:
  title: Cloudland API compatible openstack API
  version: "1.0.0"
  description: Clandland API to compatible openstack API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: spark.liu@cn.ibm.com
    name: Spark.liu
paths:
  /identity:
    get:
      produces: [application/json]
      tags: [keystone]
      description: 'redirect to identity auth point'
      responses:
        300:
          description: redirect connection
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum: ['X-Auth-Token']
            x-openstack-request-id: {type: string, description: 'request-id'}
          schema:
            type: object
            required:
            - versions
            properties:
              versions:
                $ref: '#/definitions/versions'

  /identity/v3/auth/tokens:
    post:
      consumes: [application/json]
      produces: [application/json]
      tags: [keystone]
      description: Create a new token
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              auth:
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      project:
                        type: object
                        properties:
                          domain:
                            type: object
                            properties:
                              id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
                          name: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: demo}
                  identity:
                    type: object
                    properties:
                      methods:
                        type: array
                        items: {type: string, enum: [password], example: password}
                      password:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              name: {type: string,  pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: admin}
                              password: {type: string, example: adminpwd}
                              domain:
                                type: object
                                properties:
                                  id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
      responses:
        201:
          description: successful operation
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            x-openstack-request-id: {type: string, description: 'request-id'}
            X-Subject-Token:
              type: string
          schema:
            type: object
            required:
            - token
            properties:
              token:
                $ref: '#/definitions/token'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /v2.0/networks:
    get:
      tags: [neutron]
      operationId: listNetworks
      summary: List networks
      description: |
        Lists networks to which the specified tenant has access.
      produces: [application/json]
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            Content-Length:
              type: integer
            X-Subject-Token:
              type: string
          schema:
            type: object
            required:
            - token
            properties:
              networks:
                $ref: '#/definitions/networks'
    post:
      tags: [neutron]
      operationId: createNetwork
      summary: create network without subnet
      description: |
        create a network
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              network:
                type: object
                properties:
                  admin_state_up: {type: boolean, example: true}
                  name: {type: string, example: 'net1'}
                  provider:network_type: {type: string, enum: ['vlan', 'vxlan']}
                  provider:physical_network: {type: string, enum: ['public', 'private'], example: public}
                  provider:segmentation_id: {type: string, example: '16169'}
                  router:external: {type: boolean, example: false}
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            Content-Length:
              type: integer
            X-Subject-Token:
              type: string
          schema:
            type: object
            required:
            - token
            properties:
              network:
                $ref: '#/definitions/network'
  /v2.0/subnets:
    get:
      tags: [neutron]
      operationId: listSubnets
      summary: list subnets
      description: |
        List subnets
      produces: [application/json]
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            Content-Length:
              type: integer
            X-Subject-Token:
              type: string
          schema:
              type: object
              required:
              - subnets
              properties:
                subnets:
                  $ref: '#/definitions/subnets'
    post:
      tags: [neutron]
      operationId: createSubnet
      summary: create subnets
      description: |
        create a subnet with network_id
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              subnet:
                type: object
                properties:
                  network_id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '1841f2adad3a4b4aa6485fb4e3a3fda1'}
                  ip_version: {type: integer, enum: [4, 6], example: 6}
                  cidr: {type: string, example: '10.0.0.1/24'}
                  name: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'net1'}
                  gateway_ip: {type: string, example: "192.168.1.1"}
      responses:
          200:
            description: 200 response
            headers:
              Vary:
                type: string
                description: X-Auth-Token
                default: X-Auth-Token
                enum:
                - X-Auth-Token
              Content-Length:
                type: integer
              X-Subject-Token:
                type: string
            schema:
              type: object
              required:
              - subnet
              properties:
                subnet:
                  $ref: '#/definitions/subnet'
  /flavors:
    get:
      tags: [nova]
      operationId: listFlavors
      summary: List Flavors
      description: |
        Lists all flavors accessible to your project
      produces: [application/json]
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            Content-Length:
              type: integer
            X-Subject-Token:
              type: string
            X-Openstack-Request-Id:
              type: string
          schema:
              type: object
              required:
              - flavors
              properties:
                flavors:
                  $ref: '#/definitions/flavors'
        401:
          description: unauthorized(401)
        403:
          description: forbidden(403)
    post:
      tags: [nova]
      operationId: createFlavor
      summary: Creates a flavor
      description: |
        Creating a flavor is typically only available to administrators of a cloud because this has implications for scheduling efficiently in the cloud
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              flavor:
                type: object
                properties:
                  name: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'net1'}
                  raw: {type: integer, format: int32, example: 1024}
                  vcpus: {type: integer,format: int32, example: 2}
                  disk: {type: integer, format: int32, example: 10}
      responses:
          200:
            description: 200 response
            headers:
              Vary:
                type: string
                description: X-Auth-Token
                default: X-Auth-Token
                enum: [X-Auth-Token]
              X-Subject-Token:
                type: string
              X-Openstack-Request-Id:
                type: string
            schema:
              type: object
              required:
              - flavor
              properties:
                flavor: {$ref: '#/definitions/flavor'}
  /flavors/detail:
    get:
      tags: [nova]
      operationId: listFlavorsDetail
      summary: Lists flavors with details.
      description: |
        Lists flavors with details.
      produces: [application/json]
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            Content-Length:
              type: integer
            X-Subject-Token:
              type: string
            X-Openstack-Request-Id:
              type: string
          schema:
              type: object
              required:
              - flavors
              properties:
                flavors:
                  $ref: '#/definitions/flavorsDetail'
        400:
          description:  badRequest(400)
        401:
          description: unauthorized(401)
        403:
          description: forbidden(403)
  /flavors/{flavor_id}:
    get:
      tags: [nova]
      operationId: getFlavorDetail
      summary: Show Flavor Details
      description: |
        Shows details for a flavor
      produces: [application/json]
      parameters:
        - in: path
          name: flavor_id
          required: true
          type: integer
          description: The flavor ID
        - in: header
          name: X-Openstack-Request-Id
          type: string
          required: false
        - in: header
          name: X-Subject-Token
          type: string
          required: true
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            X-Subject-Token:
              type: string
            X-Openstack-Request-Id:
              type: string
          schema:
              type: object
              required: [ flavor ]
              properties:
                flavor:
                  $ref: '#/definitions/flavor'
        401:
          description: unauthorized(401)
        403:
          description: forbidden(403)
        404:
          description: itemNotFound(404)
    delete:
      tags: [nova]
      operationId: deleteFlavorDetail
      summary: Deletes a flavor
      description: |
        Deletes a flavor
      parameters:
        - in: path
          name: flavor_id
          required: true
          type: integer
          minimum: 1
          description: The flavor ID
        - in: header
          name: X-Openstack-Request-Id
          type: string
          required: false
        - in: header
          name: X-Subject-Token
          type: string
          required: true
      responses:
        202:
          description: unauthorized(401)
        401:
          description: unauthorized(401)
        403:
          description: forbidden(403)
        404:
          description: itemNotFound(404)
  /v2/images:
    get:
      operationId: listImages
      summary: List images
      tags: [glance]
      description: |
        Lists public virtual machine (VM) images. (Since Image API v2.0.)
      produces:
      - application/json
      parameters:
        - name: limit
          required: false
          in: query
          type: string
          format: date-time
          description: |
            Use to request a specific page size. Expect a response to a limited request to return between zero and limit items. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last image from the response as the marker parameter in a subsequent limited request.
        - name: marker
          required: false
          in: query
          type: string
          description: |
            Specifies the ID of the last-seen image. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last image from the response as the marker parameter in a subsequent limited request.
        - name: sort_dir
          required: false
          in: query
          type: string
          description: |
            Sort direction. Valid values are `asc` (ascending) and `desc` (descending). Default is `desc`.
      responses:
        200:
          description: 200 response
          headers:
            Vary:
              type: string
              description: X-Auth-Token
              default: X-Auth-Token
              enum:
              - X-Auth-Token
            X-Subject-Token:
              type: string
            X-Openstack-Request-Id:
              type: string
          schema:
              type: object
              required: [ images, schema, first ]
              properties:
                scheme: {type: string, example: "/v2/schemas/images"}
                fist: {type: string, example: "/v2/images"}
                images:
                  $ref: '#/definitions/images'
    post:
      operationId: createImage
      summary: Create image
      description: |
        Creates a virtual machine (VM) image. (Since Image API v2.0.)
      tags: [glance]
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              container_format: {type: string, enum: ['bare'], example: 'bare'}
              disk_format: {type: string, enum: ['qcow2', 'raw', 'iso'], example: 'raw'}
              id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
              min_disk: {type: integer, format: int32, example: 10}
              min_ram: {type: integer, format: int32, example: 512}
              name: {type: string, enum: [stable], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'ubuntu-1'}
              protected: {type: boolean, example: false}
              visibility: {type: string, enum: ['public', 'community', 'shared', 'private'], example: 'public'}
      responses:
         201:
          description: 201 response
          schema:
            $ref: '#/definitions/image'
  /v2/images/{image_id}:
    parameters:
    - in: path
      name: image_id
      required: true
      type: integer
      description: The image ID
    get:
      operationId: getImage
      tags: [glance]
      summary: Get image details
      description: |
        Gets details for a specified image. (Since Image API v2.0.)
      produces:
      - application/json
      parameters:
        - in: path
          name: image_id
          required: true
          type: string
          minimum: 1
          description: The image ID
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/image'
    delete:
      operationId: deleteImage
      tags: [glance]
      summary: Delete image
      description: |
        Deletes a specified image. (Since Image API v2.0.)
      produces: []
      responses:
        204:
          description: 204 response
  /v2/images/{image_id}/file:
    parameters:
    - in: path
      name: image_id
      required: true
      type: integer
      description: The image ID
    put:
      operationId: uploadImage
      summary: 'Upload binary image data'
      tags: [glance]
      description: |
        Uploads binary image data. (Since Image API v2.0.)
      produces: []
      responses:
        204:
          description: 204 response
    get:
      operationId: DownloadImage
      summary: 'Download binary image data'
      tags: [glance]
      description: |
        Downloads binary image data. (Since Image API v2.0.)
      produces: []
      responses:
        200:
          description: 200 204 response
        204:
          description: 200 204 response
  /v2/images/{image_id}/members:
    parameters:
    - in: path
      name: image_id
      required: true
      type: integer
      description: 'The image ID'
    get:
      operationId: listImageMembers
      summary: 'List image members'
      tags: [glance]
      description: |
        Lists the tenants with whom this image has been shared. (Since Image API v2.1.)
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema: {$ref: '#/definitions/members'}
    post:
      operationId: createImageMember
      summary: 'Create image member'
      tags: [glance]
      description: |
        Adds a specified tenant ID as an image member. (Since Image API v2.1.)
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required: [member]
          properties:
            member: {type: string, example: '8989447062e04a818baf9e073fd04fa7'}
      produces:
      - application/json
      responses:
        200:
          description: 200 response
  /v2/images/{image_id}/members/{member_id}:
    parameters:
    - name: image_id
      required: true
      in: path
      type: string
      description: 'The image ID'
    - name: member_id
      required: true
      in: path
      type: string
      description: |
        Image member ID. For example, the tenant ID of the user with whom the image is being shared.
    get:
      operationId: getImageMember
      summary: Show image member details
      tags: [glance]
      description: |
        Shows image member details.
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema: {$ref: '#/definitions/member'}
    put:
      operationId: updateImageMember
      tags: [glance]
      summary: Update image member
      description: |
        Sets the specified status for the specified member of the specified image. (Since Image API v2.1.)
      produces:
      - application/json
      parameters:
      - name: body
        required: true
        in: body
        schema:
          type: object
          properties:
            status:
              type: string
              enum: [pending, accepted, rejected]
              example: "accepted"
          description: 'The image ID'
      responses:
        200:
          description: 200 response
          schema: {$ref: '#/definitions/member'}
    delete:
      operationId: deleteImageMember
      summary: 'Delete image member'
      tags: [glance]
      description: |
        Deletes a specified tenant ID from the member list of the specified image. (Since Image API v2.1.)
      produces: []
      responses:
        204:
          description: 204 response
  /v3/projects:
    get:
      operationId: listProjects
      summary: 'List projects'
      tags: [keystone]
      description: |
        List projects
      produces:
      - application/json
      responses:
        200:
          headers:
            X-Auth-Token:
              type: string
            x-openstack-request-id: {type: string, description: 'request-id'}
          description: 200 response
          schema: {$ref: '#/definitions/projects'}
definitions:
  token:
    type: object
    properties:
      is_domain: {type: boolean, example: false}
      methods:
        type: array
        items: {type: string, enum: [password], example: 'password'}
      roles:
        type: array
        items:
          type: object
          properties:
            id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '1841f2adad3a4b4aa6485fb4e3a3fda1'}
            name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'member'}
      expires_at: {type: string, format: date-time, example: "2015-11-06T14:32:17.893797Z"}
      issued_at: {type: string, format: date-time, example: "2015-11-06T14:32:17.893797Z"}
      project:
        type: object
        properties:
          domain:
            type: object
            properties:
              id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '1841f2adad3a4b4aa6485fb4e3a3fda1'}
              name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'member'}
          id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '1841f2adad3a4b4aa6485fb4e3a3fda1'}
          name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'member'}
      catalog:
        type: array
        items:
          type: object
          properties:
            endpoints:
              type: array
              items:
                type: object
                properties:
                  url: {type: string, format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$', example: "http://192.168.10.16/volume/v3/3b6825911eaa44059c525888dc32713b"}
                  interface: {type: string, enum: [public, private], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: public}
                  region: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'RegionOne'}
                  region_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'RegionOne'}
                  id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'Regdb9895a3f6b840d98581dbee86f49069ionOne'}
            type: {type: string, enum: ["volumev3"], example: "volumev3"}
            id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'db9895a3f6b840d98581dbee86f49069'}
            name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'member'}
      user:
        type: object
        properties:
          password_expires_at: {type: string, format: date-time, example: "2015-11-06T14:32:17.893797Z"}
          domain:
            type: object
            properties:
              id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
              name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
          id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
          name: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: default}
  versions:
    type: object
    properties:
      values:
        type: array
        items:
          type: object
          properties:
            status: {type: string, enum: [stable], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: stable}
            updated: {type: string, format: date-time, example: "2015-11-06T14:32:17.893797Z"}
            media-types:
              type: array
              items:
                type: object
                properties:
                  base: {type: string, enum: ['application/json'], example: 'application/json'}
                  type: {type: string, enum: ['application/json'], example: 'application/vnd.openstack.identity-v3+json'}
            id: {type: string, enum: ['v3.10'], example: 'v3.10'}
            links: {$ref: '#/definitions/links'}
  networks:
   type: array
   items:
      $ref: '#/definitions/network'
  network:
    type: object
    properties:
      admin_state_up: {type: boolean, example: true}
      availability_zone_hints: {type: array, items: {type: string, example: 'nova'}}
      availability_zones: {type: array, items: {type: string, example: 'nova'}}
      created_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
      dns_domain: {type: string, example: 'my-domain.org.'}
      id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
      ipv4_address_scope: {type: string, example: null}
      ipv6_address_scope:  {type: string, example: null}
      l2_adjacency: {type: boolean, example: false}
      mtu: {type: integer, example: 1500}
      name: {type: string, enum: [stable], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: net1}
      port_security_enabled:  {type: boolean, example: true}
      project_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 4fd44f30292945e481c7b8a0c8908869}
      qos_policy_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '6a8454ade84346f59e8d40665f878b2e'}
      revision_number: {type: integer, example: 1}
      router:external: {type: boolean, example: false}
      shared: {type: boolean, example: false}
      status: {type: string, enum: ['ACTIVE', 'DISABLE', 'INACTIVE'], example: "ACTIVE"}
      subnets: {type: array, items: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '54d6f61d-db07-451c-9ab3-b9609b6b6f0b'}}
      tenant_id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '4fd44f30292945e481c7b8a0c8908869'}
      updated_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
      vlan_transparent: {type: boolean, example: false}
      description: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: ''}
      is_default: {type: boolean, example: false}
      provider:network_type: {type: string, enum: ['vlan', 'vxlan', 'gre', 'flat'], example: 'vxlan'}
      provider:segmentation_id: {type: string, example: '190190'}
  subnets:
    type: array
    items:
       $ref: '#/definitions/subnet'
  subnet:
    type: object
    properties:
      name: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: subnet1}
      enable_dhcp: {type: boolean, example: true}
      network_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
      segment_id: {type: string, example: null}
      project_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 4fd44f30292945e481c7b8a0c8908869}
      tenant_id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '4fd44f30292945e481c7b8a0c8908869'}
      dns_nameservers: {type: array, items: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: '54d6f61d-db07-451c-9ab3-b9609b6b6f0b'}}
      dns_publish_fixed_ip: {type: boolean, example: true}
      allocation_pools:
        type: array
        items:
          type: object
          properties:
            start: {type: string, format: ipv4, example: '10.0.0.2'}
            end: {type: string, format: ipv4, example: '10.0.0.5'}
      host_routes:
        type: array
        items:
          type: object
          properties:
             destination: {type: string, format: ipv4, example: '10.0.0.2'}
             nexthop: {type: string, format: ipv4, example: '10.0.0.2'}
      ip_version: {type: integer, enum: [4, 6], example: 6}
      gateway_ip: {type: string, format: ipv4, example: '10.0.0.1'}
      cidr: {type: string, example: '10.0.0.1/24'}
      id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
      created_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
      description: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: ''}
      ipv6_address_mode: {type: string, enum: ['slaac', 'dhcpv6-stateful', 'dhcpv6-stateless', 'null']}
      ipv6_ra_mode: {type: string, enum: ['slaac', 'dhcpv6-stateful', 'dhcpv6-stateless', 'null']}
      revision_number: {type: integer, example: 0}
      service_types: {type: array, items: {type: string}, example: []}
      subnetpool_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
      updated_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
  flavors:
    type: array
    items:
      type: object
      required: [id, links]
      properties:
        id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
        links: {$ref: '#/definitions/links'}
  flavorsDetail:
    type: array
    items: {$ref: '#/definitions/flavor'}
  flavor:
    type: object
    properties:
      disk: {type: integer, format: int32, example: 100}
      OS-FLV-EXT-DATA:ephemeral: {type: integer, example: 0}
      os-flavor-access:is_public: {type: boolean, example: false}
      id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
      name: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'net1'}
      ram: {type: integer, format: int32, example: 100}
      swap: {type: integer, format: int32, example: 100}
      rxtx_factor: {type: number, format: float, example: 2.0}
      vcpus: {type: integer, format: int32, example: 2}
      description: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: ''}
      links: {$ref: '#/definitions/links'}
  links:
      type: array
      items:
        $ref: '#/definitions/link'
  link:
      type: object
      required: [href, rel]
      properties:
        href: {type: string, format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$', example: "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/1"}
        rel: {type: string, enum: [self, bookmark], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'self'}
  images:
      type: array
      items:
        $ref: '#/definitions/image'
  image:
      type: object
      properties:
        status: {type: string, enum: [queued, saving, active, killed, deleted, pending_delete, deactivated, uploading, importing], example: 'active'}
        name: {type: string, enum: [stable], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'ubuntu-1'}
        tags: {type: array, items: {type: string}}
        container_format: {type: string, enum: ['bare'], example: 'bare'}
        created_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
        disk_format: {type: string, enum: ['qcow2', 'raw', 'iso'], example: 'raw'}
        updated_at:  {type: string, format: date-time, example: '2016-03-08T20:19:41'}
        visibility: {type: string, enum: ['public', 'community', 'shared', 'private'], example: 'public'}
        self: {type: string, example: "/v2/images/2b61ed2b-f800-4da0-99ff-396b742b8646"}
        min_disk: {type: integer, format: int32, example: 10}
        protected: {type: boolean, example: false}
        file: {type: string, example: "/v2/images/2b61ed2b-f800-4da0-99ff-396b742b8646/file"}
        id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
        checksum: {type: string, example: "afab0f79bac770d61d24b4d0560b5f70"}
        os_hash_algo: {type: string, example: "sha512"}
        os_hash_value: {type: string, example: "ea3e20140df1cc65f53d4c5b9ee3b38d0d6868f61bbe2230417b0f98cef0e0c7c37f0ebc5c6456fa47f013de48b452617d56c15fdba25e100379bd0e81ee15ec"}
        os_hidden: {type: boolean, example: false}
        owner: {type: string, example: '5ef70662f8b34079a6eddb8da9d75fe8'}
        size: {type: integer, example: 476704768}
        schema: {type: string, example: '/v2/schemas/image'}
        virtual_size: {type: integer, example: 100}
        min_ram: {type: integer, format: int32, example: 512}
  member:
     type: object
     properties:
        created_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
        image_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
        member_id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
        schema: {type: string, example: '/v2/schemas/image'}
        status: {type: string, enum: [queued, saving, active, killed, deleted, pending_delete, deactivated, uploading, importing], example: 'active'}
        updated_at: {type: string, format: date-time, example: '2016-03-08T20:19:41'}
  members:
     type: array
     items:
        $ref: '#/definitions/member'
  projectItem:
    type: object
    properties:
        id: {type: string, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'd32019d3-bc6e-4319-9c1d-6722fc136a22'}
        name: {type: string, enum: [stable], pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'demo'}
        enabled: {type: boolean, example: true}
        domain_id: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: 'default'}
        links: {$ref: '#/definitions/links'}
        description: {type: string, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', example: ''}
  projet:
    type: object
    properties:
        project: {$ref: '#/definitions/projectItem'}
  projects:
    type: object
    properties:
        projects:
          type: array
          items:
            $ref: '#/definitions/projectItem'
# Added by API Auto Mocking Plugin
host: localhost:4001
basePath: /
schemes:
 - https
